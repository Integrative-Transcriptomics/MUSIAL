buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.1'
        classpath 'de.undercouch:gradle-download-task:3.3.0'
    }
}

import org.apache.tools.ant.filters.*
import de.undercouch.gradle.tasks.download.Download

version '1.0.0'

project.ext{
	title = "MUSIAL"
}

task downloadFile(type: Download) {
    src 'http://sourceforge.net/projects/snpeff/files/snpEff_latest_core.zip'
    dest 'src/main/resources'
}

tasks.whenTaskAdded { task ->
if (task.name == 'jar') {
    task.dependsOn downloadFile 
	}
}
//preBuild.dependsOn downloadFile
//tasks.downloadFile.execute()

allprojects {
    repositories {
        jcenter()
        mavenCentral()
    }
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'eclipse-wtp'
	apply plugin: 'de.undercouch.download'
}

dependencies {
	compile group: 'commons-cli', name: 'commons-cli', version: '1.+'
	compile 'commons-io:commons-io:2.+'
	compile 'com.github.samtools:htsjdk:2.+'
	compile 'com.google.guava:guava:+'
	compile 'args4j:args4j:2.+'//33'
//	compile group: 'org.biojava.thirdparty', name: 'forester', version: '1.+'
//	compile group: 'org.biojava', name: 'biojava-core', version: '4.+'
	
	
}

sourceCompatibility = 1.8

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
}

jar {
    manifest {
        attributes("Implementation-Title": project.title,
                "Implementation-Version": version, "main-Class": "main.Musial")
    }
    doFirst {
        from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }
    }
}

processResources {
	filesMatching('version.properties'){
    	expand projectVersion: project.version
    }
	filesMatching('title.properties'){
    	expand projectTitle: project.title
    }
} 

clean.doFirst {
	delete "${rootDir}/Releases/"
}

task copyJarToBin(type: Copy) {
	mkdir 'Releases'
	def jarName = "build/libs/" + title + "-" + version + ".jar"
    from jarName
    into "Releases"
}

build.finalizedBy(copyJarToBin)


eclipse.classpath.file {
    withXml { xml ->
        def node = xml.asNode()
        node.remove( node.find { it.@path == 'org.eclipse.jst.j2ee.internal.web.container' } )
        node.appendNode( 'classpathentry', [ kind: 'con', path: 'org.eclipse.jst.j2ee.internal.web.container', exported: 'true'])
    }
}
