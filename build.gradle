/*
Set meta-information for the project build.
*/
version 'v2.0'
group 'de.tue.it'

println "Project: $project" 
println "Name: $name" 
println "Project directory: $projectDir" 
println "Build directory: $buildDir" 
println "Version: $version" 
println "Group: $project.group" 
println "AntBuilder: $ant" 

/*
The `buildscript` block defines properties (repositories, plugins, ...)
used within the Gradle build process.
*/
buildscript {
    repositories {
        mavenCentral( )
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:4.1.2'
    }
}

/*
Import plugins used during the build process.
*/
// Use unknwon ?
import org.apache.tools.ant.filters.*
// The undercouch download plugin is used to download SnpEff during build process.
import de.undercouch.gradle.tasks.download.Download

/*
To prevent duplicate access to output directories a dependency-hierarchy is
established on different tasks.
*/
tasks.whenTaskAdded { task ->
    if ( task.name == 'jar' || task.name == 'processResources' ) {
        task.dependsOn unpackSnpEff // The `jar` task is executed after SnpEff was unpacked and the original .zip deleted.
    }
    /*
    if ( task.name == 'jar' || task.name == 'processResources' ) {
        task.dependsOn deleteSnpEffZip // The `jar` task is executed after SnpEff was unpacked and the original .zip deleted.
	} else if ( task.name == 'unpackSnpEff' ) {
        task.dependsOn downloadSnpEff // The `unpackSnpEff` task is executed after SnpEff was downloaded.
    } else if ( task.name == 'deleteSnpEffZip' ) {
        task.dependsOn unpackSnpEff // The `deleteSnpEffZip` task is executed after SNPEff was unpacked.
    }
    */
}

/*
This task downloads the latest version of SnpEff into the src/main/resources directory.
*/
/*
task downloadSnpEff( type: Download ) {
    src 'https://snpeff.blob.core.windows.net/versions/snpEff_latest_core.zip'
    dest 'src/main/resources/snpEff.zip'
}
*/

/*
This task unzips SnpEff.
*/
task unpackSnpEff( type: Copy ) {
    mkdir 'src/main/resources/'
    from zipTree( 'src/main/resources/snpEff.zip' )
    into 'src/main/resources/'
}

/*
This task deletes the zipped SnpEff file.
*/
/*
task deleteSnpEffZip( type: Delete ) {
    delete "${rootDir}/src/main/resources/snpEff.zip"
}
*/

/*
After building, the Jar is copied into the `releases` directory.
*/
task copyJarToBin( type: Copy ) {
	mkdir 'releases'
	def jarName = "build/libs/" + rootProject.name + "-" + version + ".jar"
    from jarName
    into "releases"
}

/*
Defines the repositories to look up dependencies.
*/
repositories {
    mavenCentral()
}

/*
The following plugins are used during the gradle build process.
*/
apply plugin: 'java'
apply plugin: 'de.undercouch.download'

/*
All project dependencies are defined in the following block.
*/
dependencies {
	implementation 'commons-cli:commons-cli:1+'
	implementation 'commons-io:commons-io:2.+'
	implementation 'com.github.samtools:htsjdk:2.+'
	implementation 'com.google.guava:guava:+'
	implementation 'args4j:args4j:2.+'
    implementation 'org.apache.logging.log4j:log4j-core:+'
    implementation 'org.apache.logging.log4j:log4j-api:+'
    implementation 'org.biojava:biojava-core:5.+'
    implementation 'org.biojava:biojava-genome:5.+'
    implementation 'org.biojava:biojava-structure:5.+'
    implementation 'me.tongfei:progressbar:0.9.2'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
}

/*
In order to build a final FatJar, all entries from configurations.implementation (the above defined
dependencies) are copied into configurations.includeJars to prevent an internal Gradle error.
*/
configurations {
    includeJars.extendsFrom implementation
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

/*
Defines the source directories for the tasks executed by the `java` plugin.
*/
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
}

/*
Copies the title and version of the project into resources files.
*/
processResources {
    duplicatesStrategy 'exclude' // If duplicated files exist, they are excluded.
    filesMatching('version.properties'){
    	expand projectVersion: version
    }
    filesMatching('title.properties'){
    	expand projectTitle: rootProject.name
    }
}

jar {
    duplicatesStrategy 'exclude' // If duplicated files exist, they are excluded.
    manifest {
        attributes("Implementation-Title": rootProject.name,
                "Implementation-Version": archiveVersion,
                "main-Class": "main.Musial")
    }
    doFirst {
        from { configurations.includeJars.collect { it.isDirectory() ? it : zipTree(it) } } // Collects all Jars from dependencies and builds a FatJar.
    }
}

/*
Defines steps executed by calling `gradle clean`.
*/
clean.doFirst {
	delete "${rootDir}/releases/"
    delete "${rootDir}/build/"
    delete "${rootDir}/src/main/resources/snpEff/"
}

/*
After building the FatJar, it is copied to the releases directory.
*/
build.finalizedBy( copyJarToBin )