/*
Set meta-information for the project build.
*/
version 'v2.3.7'
group 'de.tue.cs.ibmi.it'

println "Project: $project"
println "Name: $name"
println "Project directory: $projectDir"
println "Build directory: $buildDir"
println "Version: $version"
println "Group: $project.group"
println "AntBuilder: $ant"

/*
The `buildscript` block defines properties (repositories, plugins, ...)
used within the Gradle build process.
*/
buildscript {
    repositories {
        mavenCentral()
    }
}

/*
Import plugins used during the build process.
*/
/*
To prevent duplicate access to output directories a dependency-hierarchy is
established on different tasks.
*/
tasks.whenTaskAdded { task ->
    if (task.name == 'jar' || task.name == 'processResources') {
        task.dependsOn unpackSnpEff
    }
}

/*
This task unzips SnpEff.
*/
task unpackSnpEff(type: Copy) {
    from zipTree('src/main/resources/snpEff.zip')
    into 'src/main/resources/'
}

/*
After building, the Jar is copied into the `releases` directory.
*/
task copyJarToReleases(type: Copy) {
    mkdir 'releases'
    def jarName = "build/libs/" + rootProject.name + "-" + version + ".jar"
    from jarName
    into "releases"
}

/*
Defines the repositories to look up dependencies.
*/
repositories {
    mavenCentral()
    maven {
        url "https://bio.informatik.uni-jena.de/repository/libs-release-oss/"
    }
    maven {
        url "https://artifactory.cronapp.io/public-release/"
    }
}

/*
The following plugins are used during the gradle build process.
*/
apply plugin: 'java'

/*
All project dependencies are defined in the following block.
*/
dependencies {
    implementation 'commons-cli:commons-cli:1.5.0'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'com.github.samtools:htsjdk:3.0.4'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'args4j:args4j:2.33'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.biojava:biojava-core:5.4.0'
    implementation 'org.biojava:biojava-genome:5.4.0'
    implementation 'com.github.cliftonlabs:json-simple:4.0.1'
    implementation 'org.javatuples:javatuples:1.2'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.google.code.gson:gson-extras:2.8.5'
    implementation 'org.apache.commons:commons-text:1.10.0'
    implementation 'com.github.java-json-tools:json-schema-validator:2.2.14'
}

/*
In order to build a final FatJar, all entries from configurations.implementation (the above defined
dependencies) are copied into configurations.includeJars.
*/
configurations {
    includeJars.extendsFrom implementationjava
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

/*
Defines the source directories for the tasks executed by the `java` plugin.
*/
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
}

/*
Copies the title and version of the project into resources files.
*/
processResources {
    duplicatesStrategy 'exclude' // If duplicated files exist, they are excluded.
    exclude('*.zip')
    filesMatching('version.properties') {
        expand projectVersion: version
    }
    filesMatching('title.properties') {
        expand projectTitle: rootProject.name
    }
}

jar {
    duplicatesStrategy 'exclude' // If duplicated files exist, they are excluded.
    manifest {
        attributes("Implementation-Title": rootProject.name,
                "Implementation-Version": archiveVersion,
                "Main-Class": "main.Musial")
    }
    doFirst {
        from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
        // Collects all Jars from dependencies and builds a FatJar.
    }
}

/*
Defines steps executed by calling `gradle clean`.
*/
clean.doFirst {
    delete "${rootDir}/releases/"
    delete "${rootDir}/build/"
    delete "${rootDir}/src/main/resources/snpEff"
}

/*
After building the FatJar, it is copied to the releases directory.
*/
build.finalizedBy(copyJarToReleases)